name: iOS Build (iosApp + iosNativeApp)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - project: iosApp/iosApp.xcodeproj
            scheme: MyApp
          - project: iosNativeApp/GhibliXApp.xcodeproj
            scheme: MyNativeApp
    env:
      CONFIGURATION: Debug
      SDK: iphonesimulator
      # default simulator device (xcrun will resolve an installed one)
      SIM_DEVICE_NAME: "iPhone 15"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Resolve project path
        id: proj
        run: |
          set -euo pipefail
          APP_DIR="${{ matrix.app_dir }}"
          PROJ_PATH="$(ls -1 "$APP_DIR"/*.xcodeproj | head -n1 || true)"
          if [ -z "$PROJ_PATH" ]; then
            echo "No .xcodeproj found in $APP_DIR" >&2
            exit 1
          fi
          echo "project_path=$PROJ_PATH" >> $GITHUB_OUTPUT
          echo "Resolved project: $PROJ_PATH"

      - name: Determine scheme (auto if not provided)
        id: scheme
        run: |
          set -euo pipefail
          # If scheme was set in the matrix include block, use it; else auto-detect
          SCHEME_INPUT="${{ matrix.scheme || '' }}"
          if [ -n "$SCHEME_INPUT" ]; then
            echo "Using matrix-provided scheme: $SCHEME_INPUT"
            echo "value=$SCHEME_INPUT" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Auto-detect first shared scheme from the project
          PROJ="${{ steps.proj.outputs.project_path }}"
          SCHEME_JSON="$(xcodebuild -list -json -project "$PROJ" | tr -d '\n')"
          # Pull 'schemes' array from 'project' -> 'schemes'
          DETECTED_SCHEME="$(ruby -r json -e 'j=JSON.parse(STDIN.read); puts (j["project"] && j["project"]["schemes"] && j["project"]["schemes"].first) || ""' <<< "$SCHEME_JSON")"

          if [ -z "$DETECTED_SCHEME" ]; then
            echo "No shared schemes found in $PROJ. Please share a scheme or set matrix.scheme." >&2
            echo "Found JSON: $SCHEME_JSON" >&2
            exit 1
          fi

          echo "Auto-detected scheme: $DETECTED_SCHEME"
          echo "value=$DETECTED_SCHEME" >> $GITHUB_OUTPUT

      - name: Select a simulator device
        id: sim
        run: |
          set -euo pipefail
          # Try to find a matching installed simulator; fall back to generic destination
          WANT="${SIM_DEVICE_NAME}"
          # xcrun xctrace prints to stderr; capture and parse installed devices
          DEVICE=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone [^()]+' | sed -e 's/ *$//' | sort -u | grep -m1 "${WANT}" || true)
          if [ -z "$DEVICE" ]; then
            echo "Simulator $WANT not found; will use generic platform destination"
            echo "name=" >> $GITHUB_OUTPUT
          else
            echo "Using simulator: $DEVICE"
            echo "name=$DEVICE" >> $GITHUB_OUTPUT
          fi

      - name: Build (Debug / Simulator)
        run: |
          set -euo pipefail
          PROJ="${{ steps.proj.outputs.project_path }}"
          SCHEME="${{ steps.scheme.outputs.value }}"
          CONFIG="${CONFIGURATION}"
          SDK="${SDK}"
          if [ -n "${{ steps.sim.outputs.name }}" ]; then
            DEST='platform=iOS Simulator,name=${{ steps.sim.outputs.name }}'
          else
            DEST='generic/platform=iOS Simulator'
          fi

          # Clean + build
          xcodebuild \
            -project "$PROJ" \
            -scheme "$SCHEME" \
            -configuration "$CONFIG" \
            -sdk "$SDK" \
            -destination "$DEST" \
            -allowProvisioningUpdates \
            -derivedDataPath "$RUNNER_TEMP/DerivedData" \
            clean build \
            | xcpretty

      - name: Locate built .app and upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.app_dir }}-Debug.app"
          path: |
            ${{ runner.temp }}/DerivedData/Build/Products/Debug-iphonesimulator/*.app
          if-no-files-found: error
